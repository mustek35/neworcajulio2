# ========================================================================================
# ARCHIVO: integration_ffmpeg_bridge.py
# Integraci√≥n del FFmpeg Bridge en tu aplicaci√≥n de detecci√≥n
# ========================================================================================

import os
import shutil
from datetime import datetime

def integrate_ffmpeg_bridge():
    """
    Integrar FFmpeg Bridge en tu aplicaci√≥n principal
    """
    print("üîß INTEGRANDO FFMPEG BRIDGE EN TU APLICACI√ìN")
    print("=" * 60)
    
    # 1. Actualizar VisualizadorDetector
    update_visualizador_detector()
    
    # 2. Actualizar configuraci√≥n de c√°maras
    update_camera_config()
    
    # 3. Crear ejemplo de uso
    create_usage_example()
    
    print("‚úÖ INTEGRACI√ìN COMPLETADA")
    print("\nüìã PR√ìXIMOS PASOS:")
    print("   1. Reinicia tu aplicaci√≥n: python app.py")
    print("   2. La c√°mara 192.168.1.3 ahora deber√≠a funcionar")
    print("   3. Revisa logs para confirmar funcionamiento")

def update_visualizador_detector():
    """
    Actualizar VisualizadorDetector para usar FFmpeg Bridge
    """
    print("\nüìù ACTUALIZANDO VisualizadorDetector...")
    
    archivo_visualizador = "gui/visualizador_detector.py"
    
    if not os.path.exists(archivo_visualizador):
        print(f"‚ùå {archivo_visualizador} no encontrado")
        return
    
    # Crear backup
    backup_file = f"{archivo_visualizador}.backup_ffmpeg_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(archivo_visualizador, backup_file)
    print(f"üíæ Backup creado: {backup_file}")
    
    # Leer contenido actual
    with open(archivo_visualizador, 'r', encoding='utf-8') as f:
        contenido = f.read()
    
    # Agregar import del FFmpeg Bridge al inicio
    import_ffmpeg = '''
# ‚úÖ IMPORT FFMPEG BRIDGE PARA H.264
try:
    from ffmpeg_rtsp_bridge import FFmpegRTSPReader
    FFMPEG_BRIDGE_AVAILABLE = True
    print("‚úÖ FFmpeg Bridge disponible")
except ImportError:
    FFMPEG_BRIDGE_AVAILABLE = False
    print("‚ö†Ô∏è FFmpeg Bridge no disponible")
'''
    
    # Buscar imports existentes y agregar
    if "from PyQt6.QtMultimedia import" in contenido:
        pos_imports = contenido.find("from PyQt6.QtMultimedia import")
        contenido = contenido[:pos_imports] + import_ffmpeg + "\n" + contenido[pos_imports:]
    
    # Modificar el m√©todo iniciar para detectar URLs problem√°ticas
    parche_iniciar = '''
    def iniciar(self):
        rtsp_url = self.cam_data.get("rtsp")
        if rtsp_url:
            logger.info("%s: Reproduciendo RTSP %s", self.objectName(), rtsp_url)
            self.log_signal.emit(f"üé• [{self.objectName()}] Streaming iniciado: {rtsp_url}")
            
            # ‚úÖ DETECTAR SI NECESITA FFMPEG BRIDGE
            ip = self.cam_data.get('ip', '')
            if ip == '192.168.1.3' and FFMPEG_BRIDGE_AVAILABLE:
                self.log_signal.emit(f"üîß [{self.objectName()}] Usando FFmpeg Bridge para H.264")
                self._start_ffmpeg_bridge(rtsp_url)
                return
            
            # Configurar callbacks est√°ndar de MediaPlayer
            self.video_player.playbackStateChanged.connect(self._on_playback_state_changed)
            self.video_player.mediaStatusChanged.connect(self._on_media_status_changed)
            
            self.video_player.setSource(QUrl(rtsp_url))
            self.video_player.play()
        else:
            logger.warning("%s: No se encontr√≥ URL RTSP para iniciar", self.objectName())
            self.log_signal.emit(f"‚ö†Ô∏è [{self.objectName()}] No se encontr√≥ URL RTSP.")
    
    def _start_ffmpeg_bridge(self, rtsp_url):
        """Iniciar FFmpeg Bridge para c√°maras H.264 problem√°ticas"""
        try:
            self.ffmpeg_reader = FFmpegRTSPReader(rtsp_url)
            
            if self.ffmpeg_reader.start():
                self.log_signal.emit(f"‚úÖ [{self.objectName()}] FFmpeg Bridge iniciado")
                
                # Iniciar thread para procesar frames desde FFmpeg
                import threading
                self.ffmpeg_thread = threading.Thread(target=self._process_ffmpeg_frames, daemon=True)
                self.ffmpeg_thread.start()
            else:
                self.log_signal.emit(f"‚ùå [{self.objectName()}] Error iniciando FFmpeg Bridge")
                
        except Exception as e:
            self.log_signal.emit(f"‚ùå [{self.objectName()}] Error FFmpeg Bridge: {e}")
    
    def _process_ffmpeg_frames(self):
        """Procesar frames desde FFmpeg Bridge"""
        frame_count = 0
        
        while hasattr(self, 'ffmpeg_reader') and self.ffmpeg_reader.isOpened():
            try:
                ret, frame = self.ffmpeg_reader.read()
                
                if ret and frame is not None:
                    frame_count += 1
                    
                    # Procesar frame igual que on_frame normal
                    self._process_ffmpeg_frame(frame, frame_count)
                    
                    # Log progreso ocasional
                    if frame_count % 100 == 0:
                        self.log_signal.emit(f"üì∑ [{self.objectName()}] FFmpeg: {frame_count} frames procesados")
                
                else:
                    time.sleep(0.01)  # Peque√±a pausa si no hay frame
                    
            except Exception as e:
                self.log_signal.emit(f"‚ùå [{self.objectName()}] Error procesando FFmpeg frame: {e}")
                break
    
    def _process_ffmpeg_frame(self, frame, frame_count):
        """Procesar frame de FFmpeg igual que on_frame"""
        try:
            # Procesar frames para detecci√≥n seg√∫n la configuraci√≥n de FPS
            if frame_count % self.detector_frame_interval == 0:
                self._last_frame = frame
                self._pending_detections = {}
                self._current_frame_id += 1

                if hasattr(self, 'detectors'):
                    detectores_activos = sum(1 for det in self.detectors if det and det.isRunning())
                    if frame_count % 200 == 0:  # Log cada 200 frames
                        self.log_signal.emit(f"ü§ñ [{self.objectName()}] FFmpeg: {detectores_activos}/{len(self.detectors)} detectores activos")
                    
                    for det in self.detectors:
                        if det and det.isRunning():
                            det.set_frame(frame, self._current_frame_id)

        except Exception as e:
            logger.error("%s: error procesando FFmpeg frame: %s", self.objectName(), e)
            self.log_signal.emit(f"‚ùå [{self.objectName()}] Error procesando frame FFmpeg: {e}")'''
    
    # Buscar el m√©todo iniciar existente y reemplazarlo
    inicio_metodo = contenido.find("    def iniciar(self):")
    if inicio_metodo != -1:
        # Encontrar el final del m√©todo
        lineas = contenido[inicio_metodo:].split('\n')
        fin_metodo = inicio_metodo
        for i, linea in enumerate(lineas[1:], 1):
            if linea.strip() and not linea.startswith(' ') and not linea.startswith('\t'):
                if linea.strip().startswith('def '):
                    fin_metodo = inicio_metodo + len('\n'.join(lineas[:i]))
                    break
        
        # Reemplazar el m√©todo
        contenido_nuevo = contenido[:inicio_metodo] + parche_iniciar + contenido[fin_metodo:]
    else:
        contenido_nuevo = contenido + parche_iniciar
    
    # Actualizar m√©todo detener para limpiar FFmpeg
    parche_detener = '''
    def detener(self):
        logger.info("%s: Deteniendo VisualizadorDetector", self.objectName())
        
        # ‚úÖ DETENER FFMPEG BRIDGE SI EST√Å ACTIVO
        if hasattr(self, 'ffmpeg_reader'):
            try:
                self.ffmpeg_reader.release()
                self.log_signal.emit(f"üõë [{self.objectName()}] FFmpeg Bridge detenido")
            except Exception as e:
                logger.error("%s: Error deteniendo FFmpeg Bridge: %s", self.objectName(), e)
        
        # Detener detectores normales
        if hasattr(self, 'detectors'):
            for det in self.detectors:
                if det:
                    logger.info("%s: Deteniendo %s", self.objectName(), det.objectName())
                    det.stop()
        
        # Detener MediaPlayer normal
        if hasattr(self, 'video_player') and self.video_player:
            player_state = self.video_player.playbackState()
            if player_state != QMediaPlayer.PlaybackState.StoppedState:
                logger.info("%s: Deteniendo QMediaPlayer estado %s", self.objectName(), player_state)
                self.video_player.stop()
            logger.info("%s: Desvinculando salida de video del QMediaPlayer", self.objectName())
            self.video_player.setVideoSink(None)
            logger.info("%s: Agendando QMediaPlayer para deleteLater", self.objectName())
            self.video_player.deleteLater()
            self.video_player = None
        
        if hasattr(self, 'video_sink') and self.video_sink:
            self.video_sink = None
        
        logger.info("%s: VisualizadorDetector detenido", self.objectName())'''
    
    # Buscar y reemplazar m√©todo detener
    inicio_detener = contenido_nuevo.find("    def detener(self):")
    if inicio_detener != -1:
        lineas = contenido_nuevo[inicio_detener:].split('\n')
        fin_detener = inicio_detener
        for i, linea in enumerate(lineas[1:], 1):
            if linea.strip() and not linea.startswith(' ') and not linea.startswith('\t'):
                if linea.strip().startswith('def '):
                    fin_detener = inicio_detener + len('\n'.join(lineas[:i]))
                    break
        
        contenido_nuevo = contenido_nuevo[:inicio_detener] + parche_detener + contenido_nuevo[fin_detener:]
    
    # Agregar import time si no existe
    if "import time" not in contenido_nuevo:
        contenido_nuevo = "import time\n" + contenido_nuevo
    
    # Escribir archivo actualizado
    with open(archivo_visualizador, 'w', encoding='utf-8') as f:
        f.write(contenido_nuevo)
    
    print(f"‚úÖ VisualizadorDetector actualizado con FFmpeg Bridge")

def update_camera_config():
    """
    Actualizar configuraci√≥n de la c√°mara para usar URL correcta
    """
    print("\nüìù ACTUALIZANDO CONFIGURACI√ìN DE C√ÅMARA...")
    
    import json
    
    # Configuraci√≥n corregida para tu c√°mara
    config_corregida = {
        "ip": "192.168.1.3",
        "puerto": 30012,
        "usuario": "admin",
        "contrasena": "/Remoto753524",  # Contrase√±a corregida
        "tipo": "nvr",
        "canal": "1",
        "grilla": "grilla 1",
        "nombre": "C√°mara NVR - FFmpeg Bridge",
        "rtsp": "rtsp://admin:%2FRemoto753524@192.168.1.3:30012/unicast/c1/s1/live",  # URL que funciona
        "puerto_rtsp": 30012,
        "perfil": "sub",
        "fps_config": {
            "visual_fps": 15,      # Reducido para mejor performance
            "detection_fps": 5,    # Detecci√≥n cada 6 frames
            "ui_update_fps": 10
        }
    }
    
    # Buscar archivos de configuraci√≥n
    archivos_config = ["config.json", "camaras_config.json"]
    
    for archivo in archivos_config:
        if os.path.exists(archivo):
            print(f"   üìÅ Actualizando {archivo}...")
            
            try:
                with open(archivo, 'r', encoding='utf-8') as f:
                    if archivo == "config.json":
                        data = json.load(f)
                        camaras = data.get("camaras", [])
                    else:
                        camaras = json.load(f)
                
                # Buscar y actualizar c√°mara 192.168.1.3
                camara_encontrada = False
                for cam in camaras:
                    if cam.get('ip') == '192.168.1.3':
                        cam.update(config_corregida)
                        camara_encontrada = True
                        print(f"      ‚úÖ C√°mara 192.168.1.3 actualizada")
                        break
                
                if not camara_encontrada:
                    # Agregar nueva c√°mara
                    camaras.append(config_corregida)
                    print(f"      ‚úÖ C√°mara 192.168.1.3 agregada")
                
                # Crear backup
                backup_file = f"{archivo}.backup_ffmpeg_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                shutil.copy2(archivo, backup_file)
                print(f"      üíæ Backup: {backup_file}")
                
                # Guardar cambios
                with open(archivo, 'w', encoding='utf-8') as f:
                    if archivo == "config.json":
                        json.dump(data, f, indent=4, ensure_ascii=False)
                    else:
                        json.dump(camaras, f, indent=4, ensure_ascii=False)
                
                print(f"      ‚úÖ {archivo} actualizado")
                return True
                
            except Exception as e:
                print(f"      ‚ùå Error actualizando {archivo}: {e}")
    
    # Si no hay archivos, crear configuraci√≥n nueva
    print("   üìÅ Creando nueva configuraci√≥n...")
    with open("config_ffmpeg_bridge.json", 'w', encoding='utf-8') as f:
        json.dump([config_corregida], f, indent=4, ensure_ascii=False)
    
    print(f"   ‚úÖ Nueva configuraci√≥n creada: config_ffmpeg_bridge.json")

def create_usage_example():
    """
    Crear ejemplo de uso del FFmpeg Bridge
    """
    print("\nüìù CREANDO EJEMPLO DE USO...")
    
    ejemplo_uso = '''# ========================================================================================
# EJEMPLO DE USO: FFmpeg Bridge para tu aplicaci√≥n
# ========================================================================================

from ffmpeg_rtsp_bridge import FFmpegRTSPReader
import cv2
import time

def ejemplo_simple():
    """Ejemplo simple de uso del FFmpeg Bridge"""
    print("üé• EJEMPLO SIMPLE - FFMPEG BRIDGE")
    
    # URL de tu c√°mara que funciona
    rtsp_url = "rtsp://admin:%2FRemoto753524@192.168.1.3:30012/unicast/c1/s1/live"
    
    # Crear lector FFmpeg (en lugar de cv2.VideoCapture)
    cap = FFmpegRTSPReader(rtsp_url)
    
    # Iniciar captura
    if not cap.start():
        print("‚ùå Error iniciando FFmpeg Bridge")
        return
    
    print("‚úÖ FFmpeg Bridge iniciado, presiona 'q' para salir")
    
    frame_count = 0
    start_time = time.time()
    
    try:
        while True:
            # Leer frame (igual que cv2.VideoCapture)
            ret, frame = cap.read()
            
            if ret and frame is not None:
                frame_count += 1
                
                # Mostrar FPS cada 30 frames
                if frame_count % 30 == 0:
                    elapsed = time.time() - start_time
                    fps = frame_count / elapsed
                    print(f"üìä Frame {frame_count}, FPS: {fps:.1f}")
                
                # Mostrar frame
                cv2.imshow('Tu C√°mara - FFmpeg Bridge', frame)
                
                # Salir con 'q'
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            else:
                time.sleep(0.01)
                
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Detenido por usuario")
    finally:
        # Limpiar recursos
        cap.release()
        cv2.destroyAllWindows()
        
        # Estad√≠sticas finales
        total_time = time.time() - start_time
        fps_promedio = frame_count / total_time if total_time > 0 else 0
        print(f"üìä Total: {frame_count} frames en {total_time:.1f}s ({fps_promedio:.1f} FPS)")

def ejemplo_con_deteccion():
    """Ejemplo con detecci√≥n YOLO usando FFmpeg Bridge"""
    print("ü§ñ EJEMPLO CON DETECCI√ìN - FFMPEG BRIDGE")
    
    # Importar YOLO si est√° disponible
    try:
        from ultralytics import YOLO
        model = YOLO('yolov8n.pt')  # Modelo ligero
        print("‚úÖ YOLO cargado")
    except ImportError:
        print("‚ö†Ô∏è YOLO no disponible, solo mostrando frames")
        model = None
    
    rtsp_url = "rtsp://admin:%2FRemoto753524@192.168.1.3:30012/unicast/c1/s1/live"
    cap = FFmpegRTSPReader(rtsp_url)
    
    if not cap.start():
        print("‚ùå Error iniciando FFmpeg Bridge")
        return
    
    frame_count = 0
    detection_count = 0
    
    try:
        while True:
            ret, frame = cap.read()
            
            if ret and frame is not None:
                frame_count += 1
                
                # Ejecutar detecci√≥n cada 5 frames (para performance)
                if model and frame_count % 5 == 0:
                    results = model(frame, verbose=False)
                    
                    # Dibujar detecciones
                    annotated_frame = results[0].plot()
                    
                    # Contar detecciones
                    if len(results[0].boxes) > 0:
                        detection_count += len(results[0].boxes)
                        print(f"üéØ Frame {frame_count}: {len(results[0].boxes)} detecciones")
                    
                    cv2.imshow('Detecci√≥n + FFmpeg Bridge', annotated_frame)
                else:
                    cv2.imshow('Detecci√≥n + FFmpeg Bridge', frame)
                
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            else:
                time.sleep(0.01)
                
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Detenido por usuario")
    finally:
        cap.release()
        cv2.destroyAllWindows()
        print(f"üìä Total detecciones: {detection_count}")

if __name__ == "__main__":
    print("üé• EJEMPLOS DE USO - FFMPEG BRIDGE")
    print("=" * 50)
    print("1. Ejemplo simple")
    print("2. Ejemplo con detecci√≥n YOLO")
    
    try:
        opcion = input("\\nSelecciona opci√≥n (1-2): ").strip()
        
        if opcion == "1":
            ejemplo_simple()
        elif opcion == "2":
            ejemplo_con_deteccion()
        else:
            print("‚ùå Opci√≥n inv√°lida")
            
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Cancelado por usuario")
'''
    
    with open("ejemplo_ffmpeg_bridge.py", 'w', encoding='utf-8') as f:
        f.write(ejemplo_uso)
    
    print(f"‚úÖ Ejemplo creado: ejemplo_ffmpeg_bridge.py")

def main():
    """
    Funci√≥n principal de integraci√≥n
    """
    print("üîß INTEGRACI√ìN FFMPEG BRIDGE - SOLUCI√ìN COMPLETA")
    print("=" * 60)
    
    print("üìã ESTADO ACTUAL:")
    print("   ‚úÖ FFmpeg Bridge probado y funcional")
    print("   ‚úÖ Tu c√°mara H.264 transmite correctamente")
    print("   ‚úÖ 30 frames recibidos exitosamente")
    print("   üéØ Integrando en tu aplicaci√≥n...")
    
    try:
        integrate_ffmpeg_bridge()
        
        print(f"\nüéâ ¬°INTEGRACI√ìN COMPLETADA EXITOSAMENTE!")
        print(f"=" * 50)
        
        print(f"\nüìÅ ARCHIVOS MODIFICADOS:")
        print(f"   ‚Ä¢ gui/visualizador_detector.py - Actualizado con FFmpeg Bridge")
        print(f"   ‚Ä¢ config.json - Configuraci√≥n de c√°mara corregida")
        print(f"   ‚Ä¢ ejemplo_ffmpeg_bridge.py - Ejemplos de uso")
        
        print(f"\nüöÄ C√ìMO PROCEDER:")
        print(f"   1. Reinicia tu aplicaci√≥n: python app.py")
        print(f"   2. Tu c√°mara 192.168.1.3 ahora usar√° FFmpeg Bridge autom√°ticamente")
        print(f"   3. Verifica logs para confirmar: '‚úÖ FFmpeg Bridge iniciado'")
        print(f"   4. Si hay problemas, revisa console debug")
        
        print(f"\nüß™ PRUEBAS ADICIONALES:")
        print(f"   ‚Ä¢ python ejemplo_ffmpeg_bridge.py - Test individual")
        print(f"   ‚Ä¢ python test_ffmpeg_bridge_simple.py - Verificaci√≥n r√°pida")
        
        print(f"\nüí° NOTAS IMPORTANTES:")
        print(f"   ‚Ä¢ Solo la c√°mara 192.168.1.3 usa FFmpeg Bridge")
        print(f"   ‚Ä¢ Otras c√°maras siguen usando OpenCV normal")
        print(f"   ‚Ä¢ FPS reducido a 15/5 para mejor performance")
        print(f"   ‚Ä¢ Backups autom√°ticos creados de archivos modificados")
        
    except Exception as e:
        print(f"\n‚ùå Error durante integraci√≥n: {e}")
        print(f"üîß Revisar archivos y permisos")

if __name__ == "__main__":
    main()