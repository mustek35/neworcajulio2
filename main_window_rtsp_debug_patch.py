# ========================================================================================
# ARCHIVO: main_window_rtsp_debug_patch.py
# Parche para agregar monitoreo RTSP integrado a MainWindow
# ========================================================================================

import os
import shutil
from datetime import datetime

def aplicar_parche_main_window():
    """
    Aplica parche a main_window.py para agregar funcionalidad de debug RTSP
    """
    print("üîß Aplicando parche de debug RTSP a MainWindow...")
    
    archivo_main = "ui/main_window.py"
    
    if not os.path.exists(archivo_main):
        print(f"‚ùå No se encontr√≥ {archivo_main}")
        return False
    
    # Crear backup
    backup_file = f"{archivo_main}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(archivo_main, backup_file)
    print(f"üíæ Backup creado: {backup_file}")
    
    # Leer contenido actual
    with open(archivo_main, 'r', encoding='utf-8') as f:
        contenido = f.read()
    
    # ================================
    # PARCHE 1: Agregar imports
    # ================================
    imports_nuevos = '''
# ‚úÖ IMPORTS PARA DEBUG RTSP
try:
    from rtsp_monitor import RTSPMonitor, RTSPMonitorWidget
    RTSP_MONITOR_AVAILABLE = True
except ImportError:
    RTSP_MONITOR_AVAILABLE = False
    print("‚ö†Ô∏è rtsp_monitor no disponible")

import cv2
import threading
import socket
'''
    
    # Buscar imports existentes y agregar los nuevos
    if "from PyQt6.QtWidgets import" in contenido:
        pos_imports = contenido.find("from PyQt6.QtWidgets import")
        contenido = contenido[:pos_imports] + imports_nuevos + "\n" + contenido[pos_imports:]
    
    # ================================
    # PARCHE 2: Agregar m√©todo debug_camera_connection
    # ================================
    metodo_debug_connection = '''
    def debug_camera_connection(self, cam_data):
        """Ejecutar diagn√≥stico detallado de una c√°mara espec√≠fica"""
        ip = cam_data.get('ip', 'N/A')
        rtsp_url = cam_data.get('rtsp', '')
        
        self.append_debug(f"üîç Iniciando diagn√≥stico para {ip}...")
        
        # Verificar datos b√°sicos
        self.append_debug(f"üìù IP: {ip}")
        self.append_debug(f"üë§ Usuario: {cam_data.get('usuario', 'N/A')}")
        self.append_debug(f"üì∫ Canal: {cam_data.get('canal', 'N/A')}")
        self.append_debug(f"üîó URL: {rtsp_url}")
        
        # Thread para no bloquear la UI
        def run_diagnosis():
            try:
                # 1. Ping test
                self.append_debug(f"üì° Probando conectividad...")
                if self._test_ping(ip):
                    self.append_debug(f"‚úÖ Ping exitoso a {ip}")
                else:
                    self.append_debug(f"‚ùå No se puede hacer ping a {ip}")
                
                # 2. Puerto RTSP
                puerto = int(cam_data.get('puerto', 554))
                self.append_debug(f"üîå Probando puerto {puerto}...")
                if self._test_port(ip, puerto):
                    self.append_debug(f"‚úÖ Puerto {puerto} accesible")
                else:
                    self.append_debug(f"‚ùå Puerto {puerto} no accesible")
                
                # 3. Test RTSP con OpenCV
                if rtsp_url:
                    self.append_debug(f"üìπ Probando stream RTSP...")
                    success, frames, error = self._test_rtsp_stream(rtsp_url)
                    if success:
                        self.append_debug(f"‚úÖ Stream RTSP funcional - {frames} frames recibidos")
                    else:
                        self.append_debug(f"‚ùå Error en stream RTSP: {error}")
                else:
                    self.append_debug(f"‚ö†Ô∏è URL RTSP no configurada")
                    
            except Exception as e:
                self.append_debug(f"‚ùå Error en diagn√≥stico: {e}")
        
        # Ejecutar en thread separado
        thread = threading.Thread(target=run_diagnosis, daemon=True)
        thread.start()
    
    def _test_ping(self, host, timeout=3):
        """Test de ping b√°sico"""
        try:
            import subprocess
            import platform
            
            param = '-n' if platform.system().lower() == 'windows' else '-c'
            result = subprocess.run(['ping', param, '1', host], 
                                  capture_output=True, text=True, timeout=timeout)
            return result.returncode == 0
        except Exception:
            return False
    
    def _test_port(self, host, port, timeout=5):
        """Test de conectividad de puerto"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            result = sock.connect_ex((host, port))
            sock.close()
            return result == 0
        except Exception:
            return False
    
    def _test_rtsp_stream(self, rtsp_url, timeout=10):
        """Test de stream RTSP con OpenCV"""
        try:
            cap = cv2.VideoCapture(rtsp_url)
            
            if not cap.isOpened():
                return False, 0, "No se pudo abrir el stream"
            
            frames_count = 0
            start_time = time.time()
            
            while time.time() - start_time < timeout and frames_count < 10:
                ret, frame = cap.read()
                if ret and frame is not None:
                    frames_count += 1
                else:
                    break
                time.sleep(0.1)
            
            cap.release()
            
            if frames_count > 0:
                return True, frames_count, None
            else:
                return False, 0, "No se recibieron frames v√°lidos"
                
        except Exception as e:
            return False, 0, str(e)
'''
    
    # Buscar lugar para insertar el m√©todo (antes del √∫ltimo m√©todo o al final de la clase)
    if "def closeEvent(self, event):" in contenido:
        pos_insert = contenido.find("def closeEvent(self, event):")
        contenido = contenido[:pos_insert] + metodo_debug_connection + "\n    " + contenido[pos_insert:]
    else:
        # Buscar el final de la clase MainWindow
        pos_class_end = contenido.rfind("class MainWindow")
        if pos_class_end != -1:
            # Encontrar el final de la clase
            lines = contenido[pos_class_end:].split('\n')
            insert_pos = pos_class_end
            for i, line in enumerate(lines):
                if line.strip() and not line.startswith(' ') and not line.startswith('\t') and i > 10:
                    insert_pos = pos_class_end + len('\n'.join(lines[:i]))
                    break
            contenido = contenido[:insert_pos] + metodo_debug_connection + "\n" + contenido[insert_pos:]
    
    # ================================
    # PARCHE 3: Modificar setup_menu para agregar debug
    # ================================
    menu_debug_patch = '''
        # ‚úÖ MENU DEBUG RTSP
        debug_menu = menubar.addMenu("üîç Debug")
        
        test_all_action = debug_menu.addAction("üìä Probar Todas las C√°maras")
        test_all_action.triggered.connect(self.test_all_cameras)
        
        monitor_action = debug_menu.addAction("üì∫ Monitor RTSP en Vivo")
        monitor_action.triggered.connect(self.open_rtsp_monitor)
        
        debug_menu.addSeparator()
        
        connection_action = debug_menu.addAction("üîç Diagn√≥stico de Conexi√≥n")
        connection_action.triggered.connect(self.open_connection_diagnostics)
'''
    
    # Buscar el final de setup_menu y agregar el men√∫ debug
    if "def setup_menu(self):" in contenido:
        # Encontrar el final del m√©todo setup_menu
        pos_setup_menu = contenido.find("def setup_menu(self):")
        lines = contenido[pos_setup_menu:].split('\n')
        
        # Buscar el final del m√©todo (siguiente def o final del contenido)
        method_end = pos_setup_menu
        for i, line in enumerate(lines[1:], 1):
            if line.strip() and not line.startswith(' ') and not line.startswith('\t'):
                if line.strip().startswith('def '):
                    method_end = pos_setup_menu + len('\n'.join(lines[:i]))
                    break
        
        # Insertar el men√∫ debug antes del final del m√©todo
        contenido = contenido[:method_end-1] + menu_debug_patch + "\n" + contenido[method_end:]
    
    # ================================
    # PARCHE 4: Agregar m√©todos para el men√∫ debug
    # ================================
    metodos_debug_menu = '''
    def test_all_cameras(self):
        """Probar conectividad de todas las c√°maras"""
        self.append_debug("üöÄ Iniciando test de todas las c√°maras...")
        
        if not self.camera_data_list:
            self.append_debug("‚ùå No hay c√°maras configuradas")
            return
        
        def run_tests():
            success_count = 0
            total_count = len(self.camera_data_list)
            
            for i, cam_data in enumerate(self.camera_data_list, 1):
                ip = cam_data.get('ip', f'cam_{i}')
                self.append_debug(f"üîç [{i}/{total_count}] Probando {ip}...")
                
                try:
                    # Test b√°sico de conectividad
                    if self._test_ping(ip):
                        self.append_debug(f"  ‚úÖ Ping OK")
                        
                        # Test puerto RTSP
                        puerto = int(cam_data.get('puerto', 554))
                        if self._test_port(ip, puerto):
                            self.append_debug(f"  ‚úÖ Puerto {puerto} OK")
                            
                            # Test stream RTSP
                            rtsp_url = cam_data.get('rtsp')
                            if rtsp_url:
                                success, frames, error = self._test_rtsp_stream(rtsp_url, timeout=5)
                                if success:
                                    self.append_debug(f"  ‚úÖ Stream OK ({frames} frames)")
                                    success_count += 1
                                else:
                                    self.append_debug(f"  ‚ùå Stream Error: {error}")
                            else:
                                self.append_debug(f"  ‚ö†Ô∏è URL RTSP no configurada")
                        else:
                            self.append_debug(f"  ‚ùå Puerto {puerto} no accesible")
                    else:
                        self.append_debug(f"  ‚ùå No hay conectividad de red")
                        
                except Exception as e:
                    self.append_debug(f"  ‚ùå Error: {e}")
                
                time.sleep(0.5)  # Pausa entre tests
            
            self.append_debug(f"üìä RESULTADO: {success_count}/{total_count} c√°maras funcionando")
        
        # Ejecutar en thread separado
        thread = threading.Thread(target=run_tests, daemon=True)
        thread.start()
    
    def open_rtsp_monitor(self):
        """Abrir monitor RTSP en tiempo real"""
        if not RTSP_MONITOR_AVAILABLE:
            self.append_debug("‚ùå Monitor RTSP no disponible - falta rtsp_monitor.py")
            return
        
        try:
            if not hasattr(self, 'rtsp_monitor_widget'):
                self.rtsp_monitor_widget = RTSPMonitorWidget(self.camera_data_list, self)
            
            self.rtsp_monitor_widget.show()
            self.rtsp_monitor_widget.raise_()
            self.append_debug("üì∫ Monitor RTSP abierto")
            
        except Exception as e:
            self.append_debug(f"‚ùå Error abriendo monitor RTSP: {e}")
    
    def open_connection_diagnostics(self):
        """Abrir di√°logo de diagn√≥sticos de conexi√≥n"""
        try:
            from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QComboBox, QTextEdit, QLabel
            
            class ConnectionDiagDialog(QDialog):
                def __init__(self, camera_list, parent=None):
                    super().__init__(parent)
                    self.camera_list = camera_list
                    self.parent_window = parent
                    self.setWindowTitle("üîç Diagn√≥stico de Conexi√≥n")
                    self.setFixedSize(600, 400)
                    self.setup_ui()
                
                def setup_ui(self):
                    layout = QVBoxLayout(self)
                    
                    # Selector de c√°mara
                    selector_layout = QHBoxLayout()
                    selector_layout.addWidget(QLabel("C√°mara:"))
                    
                    self.camera_combo = QComboBox()
                    for i, cam in enumerate(self.camera_list):
                        ip = cam.get('ip', f'C√°mara {i+1}')
                        name = cam.get('nombre', ip)
                        self.camera_combo.addItem(f"{name} ({ip})")
                    
                    selector_layout.addWidget(self.camera_combo)
                    
                    self.diagnose_btn = QPushButton("üîç Diagnosticar")
                    self.diagnose_btn.clicked.connect(self.run_diagnosis)
                    selector_layout.addWidget(self.diagnose_btn)
                    
                    layout.addLayout(selector_layout)
                    
                    # √Årea de resultados
                    self.result_text = QTextEdit()
                    self.result_text.setReadOnly(True)
                    layout.addWidget(self.result_text)
                    
                    # Botones
                    button_layout = QHBoxLayout()
                    button_layout.addStretch()
                    
                    close_btn = QPushButton("Cerrar")
                    close_btn.clicked.connect(self.close)
                    button_layout.addWidget(close_btn)
                    
                    layout.addLayout(button_layout)
                
                def run_diagnosis(self):
                    selected_index = self.camera_combo.currentIndex()
                    if selected_index < 0:
                        return
                    
                    cam_data = self.camera_list[selected_index]
                    self.result_text.clear()
                    self.result_text.append("üîç Iniciando diagn√≥stico...\n")
                    
                    # Ejecutar diagn√≥stico en la ventana principal
                    if self.parent_window:
                        self.parent_window.debug_camera_connection(cam_data)
                        self.result_text.append("üìã Revisa la consola de debug para resultados detallados")
            
            dialog = ConnectionDiagDialog(self.camera_data_list, self)
            dialog.exec()
            
        except Exception as e:
            self.append_debug(f"‚ùå Error abriendo diagn√≥sticos: {e}")
'''
    
    # Insertar m√©todos al final de la clase
    if "def closeEvent(self, event):" in contenido:
        pos_insert = contenido.find("def closeEvent(self, event):")
        contenido = contenido[:pos_insert] + metodos_debug_menu + "\n    " + contenido[pos_insert:]
    
    # ================================
    # PARCHE 5: Agregar import time al inicio
    # ================================
    if "import time" not in contenido:
        contenido = "import time\n" + contenido
    
    # Escribir archivo modificado
    with open(archivo_main, 'w', encoding='utf-8') as f:
        f.write(contenido)
    
    print("‚úÖ MainWindow actualizado con debug RTSP")
    return True


def crear_script_aplicar_debug():
    """Crear script principal para aplicar todos los parches de debug"""
    
    script_content = '''#!/usr/bin/env python3
# ========================================================================================
# SCRIPT PRINCIPAL: aplicar_debug_completo.py
# Aplica todos los parches de debug para diagn√≥stico de c√°maras
# ========================================================================================

import os
import sys
from datetime import datetime

def main():
    """Funci√≥n principal para aplicar debug completo"""
    print("üöÄ APLICANDO DEBUG COMPLETO PARA C√ÅMARAS")
    print("=" * 60)
    
    # Verificar que estamos en el directorio correcto
    archivos_requeridos = [
        "ui/main_window.py",
        "gui/visualizador_detector.py", 
        "gui/grilla_widget.py"
    ]
    
    missing_files = [f for f in archivos_requeridos if not os.path.exists(f)]
    if missing_files:
        print(f"‚ùå Error: No se encontraron archivos requeridos:")
        for f in missing_files:
            print(f"   ‚Ä¢ {f}")
        print("\\nAseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto.")
        return False
    
    success_count = 0
    
    # 1. Aplicar debug mejorado para c√°maras
    print("\\nüîß 1. Aplicando debug mejorado para c√°maras...")
    try:
        from debug_camera_enhanced import aplicar_debug_camara
        aplicar_debug_camara()
        success_count += 1
        print("   ‚úÖ Debug de c√°maras aplicado")
    except Exception as e:
        print(f"   ‚ùå Error aplicando debug de c√°maras: {e}")
    
    # 2. Aplicar parche a MainWindow
    print("\\nüîß 2. Aplicando parche a MainWindow...")
    try:
        from main_window_rtsp_debug_patch import aplicar_parche_main_window
        if aplicar_parche_main_window():
            success_count += 1
            print("   ‚úÖ MainWindow actualizado")
        else:
            print("   ‚ùå Error aplicando parche a MainWindow")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 3. Verificar archivos creados
    print("\\nüîß 3. Verificando archivos de debug...")
    archivos_debug = [
        "rtsp_monitor.py",
        "diagnostico_camaras.py", 
        "debug_camera_enhanced.py",
        "main_window_rtsp_debug_patch.py"
    ]
    
    for archivo in archivos_debug:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo}")
        else:
            print(f"   ‚ö†Ô∏è {archivo} no encontrado")
    
    # 4. Resultados finales
    print("\\n" + "=" * 60)
    print("üìä RESUMEN DE APLICACI√ìN:")
    print(f"   ‚úÖ Parches aplicados: {success_count}/2")
    
    if success_count == 2:
        print("\\nüéâ DEBUG APLICADO EXITOSAMENTE")
        print("\\nüìã PR√ìXIMOS PASOS:")
        print("   1. Reinicia la aplicaci√≥n principal")
        print("   2. Ve al men√∫ 'üîç Debug' para nuevas opciones")
        print("   3. Usa 'Probar Todas las C√°maras' para test r√°pido")
        print("   4. Usa 'Monitor RTSP en Vivo' para monitoreo continuo")
        print("   5. Revisa la consola para mensajes de debug detallados")
        print("\\nüîç DIAGN√ìSTICO MANUAL:")
        print("   ‚Ä¢ Ejecuta: python diagnostico_camaras.py")
        print("   ‚Ä¢ Ejecuta: python rtsp_monitor.py")
        print("\\nüìù LOGS MEJORADOS:")
        print("   ‚Ä¢ Informaci√≥n de conexi√≥n RTSP detallada")
        print("   ‚Ä¢ Estado de frames en tiempo real")
        print("   ‚Ä¢ Diagn√≥stico autom√°tico de errores")
        
    else:
        print("\\n‚ö†Ô∏è APLICACI√ìN PARCIAL")
        print("Algunos parches no se pudieron aplicar completamente.")
        print("Revisa los errores anteriores y ejecuta manualmente si es necesario.")
    
    return success_count == 2

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Cancelado por usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\\n‚ùå Error inesperado: {e}")
        sys.exit(1)
'''
    
    with open("aplicar_debug_completo.py", 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ Script principal creado: aplicar_debug_completo.py")


def crear_guia_uso():
    """Crear gu√≠a de uso para el debug de c√°maras"""
    
    guia_content = '''# üîç GU√çA DE USO - DEBUG DE C√ÅMARAS

## üìã Resumen
Esta gu√≠a explica c√≥mo usar las nuevas herramientas de debug para diagnosticar problemas de c√°maras que muestran "sin se√±al".

## üöÄ Aplicaci√≥n R√°pida

### 1. Aplicar Debug Autom√°ticamente
```bash
python aplicar_debug_completo.py
```

### 2. Reiniciar la Aplicaci√≥n
Despu√©s de aplicar los parches, reinicia tu aplicaci√≥n principal.

## üîç Herramientas de Diagn√≥stico

### A. Men√∫ Debug en la Aplicaci√≥n
Despu√©s de aplicar los parches, encontrar√°s un nuevo men√∫ "üîç Debug" con:

1. **üìä Probar Todas las C√°maras**
   - Test r√°pido de conectividad
   - Verifica ping, puertos y streams RTSP
   - Resultados en la consola de debug

2. **üì∫ Monitor RTSP en Vivo**
   - Monitoreo continuo de streams
   - Estad√≠sticas de FPS en tiempo real
   - Detecci√≥n autom√°tica de desconexiones

3. **üîç Diagn√≥stico de Conexi√≥n**
   - Diagn√≥stico individual por c√°mara
   - An√°lisis detallado de problemas

### B. Herramientas de L√≠nea de Comandos

#### 1. Diagn√≥stico Completo
```bash
python diagnostico_camaras.py
```
- Analiza todas las c√°maras configuradas
- Verifica conectividad de red
- Prueba autenticaci√≥n y streams RTSP

#### 2. Monitor RTSP Individual
```bash
python rtsp_monitor.py rtsp://usuario:pass@192.168.1.100:554/cam/realmonitor?channel=1&subtype=0 30
```
- Monitorea una c√°mara espec√≠fica por 30 segundos
- Muestra estad√≠sticas de frames y FPS

#### 3. Monitor Interactivo
```bash
python rtsp_monitor.py
```
- Interfaz interactiva para seleccionar modo
- Opci√≥n para probar todas las c√°maras

## üìä Interpretaci√≥n de Resultados

### ‚úÖ Se√±ales Positivas
- `‚úÖ Ping exitoso`: Red funcionando
- `‚úÖ Puerto 554 accesible`: Servicio RTSP activo
- `‚úÖ Stream RTSP funcional`: C√°mara transmitiendo
- `‚úÖ X frames recibidos`: Stream estable

### ‚ùå Se√±ales de Problema
- `‚ùå No se puede hacer ping`: Problema de red o IP incorrecta
- `‚ùå Puerto 554 no accesible`: Servicio RTSP apagado/bloqueado
- `‚ùå No se pudo abrir stream`: URL incorrecta o credenciales inv√°lidas
- `‚ùå No se recibieron frames`: Stream conecta pero no transmite

### ‚ö†Ô∏è Se√±ales de Advertencia
- `‚ö†Ô∏è URL RTSP no configurada`: Falta configuraci√≥n
- `‚ö†Ô∏è Stream interrumpido`: Conexi√≥n inestable
- `‚ö†Ô∏è FPS bajo`: Possible problema de ancho de banda

## üîß Debug Mejorado en Logs

Los nuevos logs incluyen:

### Estados de Conexi√≥n
```
üé¨ [Visualizador_192.168.1.100] Estado reproducci√≥n: PlayingState
üì∫ [Visualizador_192.168.1.100] Estado media: BufferedMedia
‚úÖ [Visualizador_192.168.1.100] STREAM ACTIVO - Recibiendo datos
```

### Informaci√≥n de Frames
```
üì∑ [Visualizador_192.168.1.100] Frame #100: 1920x1080, Formato: 25
ü§ñ [Visualizador_192.168.1.100] Detectores activos: 2/2
```

### Errores Detallados
```
‚ùå [Visualizador_192.168.1.100] MEDIA INV√ÅLIDO - URL incorrecta o stream no disponible
‚õî [Visualizador_192.168.1.100] STREAM DETENIDO - Verificar conexi√≥n
```

## üõ†Ô∏è Soluci√≥n de Problemas Comunes

### Problema: "Sin se√±al" en c√°maras
1. Ejecutar `python diagnostico_camaras.py`
2. Verificar resultados del ping y puerto
3. Si el ping falla: verificar IP y conectividad de red
4. Si el puerto falla: verificar que el servicio RTSP est√© activo
5. Si el stream falla: verificar URL y credenciales

### Problema: Stream se conecta pero no muestra video
1. Usar monitor RTSP para verificar frames
2. Verificar que el canal y perfil sean correctos
3. Probar diferentes perfiles (main/sub)
4. Verificar ancho de banda de red

### Problema: Conexi√≥n intermitente
1. Usar "Monitor RTSP en Vivo" para monitoreo continuo
2. Verificar estabilidad de red
3. Ajustar configuraci√≥n de FPS
4. Verificar carga del servidor de c√°maras

## üìã Checklist de Verificaci√≥n

### Antes de Reportar Problemas
- [ ] Aplicado debug completo con `aplicar_debug_completo.py`
- [ ] Ejecutado `diagnostico_camaras.py`
- [ ] Revisado logs de debug en la aplicaci√≥n
- [ ] Probado monitor RTSP individual
- [ ] Verificado conectividad de red b√°sica
- [ ] Confirmado credenciales de c√°mara

### Informaci√≥n para Soporte
Cuando reportes problemas, incluye:
1. Resultado completo de `diagnostico_camaras.py`
2. Logs de debug de la aplicaci√≥n
3. Modelo de c√°mara y configuraci√≥n de red
4. Informaci√≥n del servidor/NVR si aplica

## üéØ Pr√≥ximos Pasos

Despu√©s de aplicar el debug:
1. Reinicia la aplicaci√≥n
2. Prueba las nuevas herramientas de debug
3. Identifica patrones en los errores
4. Ajusta configuraci√≥n seg√∫n los resultados
5. Monitorea estabilidad con las nuevas herramientas

---
üìû **¬øNecesitas ayuda?** Comparte los resultados del diagn√≥stico para an√°lisis detallado.
'''
    
    with open("GUIA_DEBUG_CAMARAS.md", 'w', encoding='utf-8') as f:
        f.write(guia_content)
    
    print("‚úÖ Gu√≠a de uso creada: GUIA_DEBUG_CAMARAS.md")


if __name__ == "__main__":
    print("üîß Creando herramientas de debug para MainWindow...")
    
    try:
        # Aplicar parche a MainWindow
        if aplicar_parche_main_window():
            print("‚úÖ Parche aplicado exitosamente")
        else:
            print("‚ùå Error aplicando parche")
        
        # Crear script principal
        crear_script_aplicar_debug()
        
        # Crear gu√≠a de uso
        crear_guia_uso()
        
        print("\nüéâ HERRAMIENTAS DE DEBUG CREADAS")
        print("üìã Archivos generados:")
        print("   ‚Ä¢ aplicar_debug_completo.py - Script principal")
        print("   ‚Ä¢ GUIA_DEBUG_CAMARAS.md - Gu√≠a de uso")
        print("\nüöÄ Ejecuta: python aplicar_debug_completo.py")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()